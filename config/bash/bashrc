export PATH="$PATH:/usr/local/bin"
if [ -d $HOME/.local/bin ]; then
  export PATH="$PATH:$HOME/.local/bin"
fi

export DOTFILES_PATH={{ dotfiles_path }}

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# == Keys ==

set -o vi

# == Tab completion ==

# Get bash to cycle through possible completions
[[ $- = *i* ]] && bind TAB:menu-complete

# == History ==

# Append to the history file, don't overwrite it
shopt -s histappend

# Save multiple-line commands as one command
shopt -s cmdhist

# Huge history
HISTSIZE=100000
HISTFILESIZE=100000

# Avoid duplicate entries
HISTCONTROL="erasedups:ignoreboth"

# Don't record some commands
export HISTIGNORE="&:[]*:exit:ls:bg:fg:history:sl:ll:cl"

# Useful timestamp format
HISTTIMEFORMAT='%F %T '

# == Directory navigation ==

# Colored output
if [ -x /usr/bin/colors ]; then
  eval "`dircolors -b`"
fi

# Prepend cd when only the directory name is typed
shopt -s autocd

# == Editor ==

if [ -x "$(command -v nvim)" ]; then
  export EDITOR=nvim
elif [ -x "$(command -v vim)" ]; then
  export EDITOR=vim
fi

# == Additional config files ==

# Load aliases
source ~/.config/bash/aliases.sh
if [ -f $HOME/.config/bash/aliases.{{ platform }}.sh ]; then
  source $HOME/.config/bash/aliases.{{ platform }}.sh
fi

# Load local config
if [ -f $HOME/.config/bash/{{ name }}.sh ]; then
  source $HOME/.config/bash/{{ name }}.sh
fi

# Load prompt
PROMPT_COMMAND='history -a'
eval "$(starship init bash)"

# Load custom functions
source ~/.config/bash/fns.sh

# Load z
if [ -f $HOME/.config/bash/z.sh ]; then
  source $HOME/.config/bash/z.sh
fi

# Enable bash completion in interactive shells
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# Fzf
export FZF_DEFAULT_COMMAND='rg --files --hidden --follow --glob "!.git/*"'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
if [ -f ~/.fzf.bash ]; then
  source ~/.fzf.bash
fi

# Rust
# Put binaries installed using "cargo install" in path
export PATH="$PATH:$HOME/.cargo/bin"
# Locate rust source for rls
export RUST_SRC_PATH="$HOME/.rustup/toolchains/stable-{{ target }}/lib/rustlib/src/rust/src"
# Add libs in link path for all channels
for channel in stable beta nightly; do
  export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$HOME/.rustup/toolchains/$channel-{{ target }}/lib"
done
