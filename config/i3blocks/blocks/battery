#!/usr/bin/perl
#
# Copyright 2014 Pierre Mavro <deimos@deimos.fr>
# Copyright 2014 Vivien Didelot <vivien@didelot.org>
#
# Licensed under the terms of the GNU GPL v3, or any later version.
#
# This script is meant to use with i3blocks. It parses the output of the "acpi"
# command (often provided by a package of the same name) to read the status of
# the battery, and eventually its remaining time (to full charge or discharge).
#
# The color will gradually change for a percentage below 85%, and the urgency
# (exit code 33) is set if there is less that 5% remaining.

use strict;
use warnings;
use utf8;

my $plugged_icon = '';

my $battery_empty="";
my $battery_quater="";
my $battery_half="";
my $battery_three_quaters="";
my $battery_full='';

my $red = "#FB4934";
my $orange = "#D79921";
my $yellow = "#FABD2F";
my $green = "#98971A";

my $acpi;
my $status;
my $percent;
my $full_text;
my $short_text;
my $bat_number = $ENV{BLOCK_INSTANCE} || 0;

# read the first line of the "acpi" command output
open (ACPI, "acpi -b | grep 'Battery $bat_number' |") or die;
$acpi = <ACPI>;
close(ACPI);

# fail on unexpected output
if ($acpi !~ /: (\w+), (\d+)%/) {
  die "$acpi\n";
}

$status = $1;
$percent = $2;

if ($status eq 'Charging') {
  $full_text .= $plugged_icon
}

$full_text .= ' <span foreground="';
if ($percent < 20) {
  $full_text .= $red . '">' . $battery_empty . '</span>';
} elsif ($percent < 40) {
  $full_text .= $orange . '">' . $battery_quater . '</span>';
} elsif ($percent < 60) {
  $full_text .= $yellow. '">' . $battery_half . '</span>';
} elsif ($percent < 85) {
  $full_text .= $green . '">' . $battery_three_quaters . '</span>';
} else {
  $full_text .= $green . '">' . $battery_full . '</span>';
}
$full_text .= ' ' . $percent . '%';
$short_text = $full_text;
if ($acpi =~ /(\d\d:\d\d):/) {
  $full_text .= " ($1)";
}

# print text
print "$full_text\n";
print "$short_text\n";

if ($status eq 'Discharging') {
  if ($percent < 5) {
    exit(33);
  }
}

exit(0);
